(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.RemHelp = factory());
}(this, (function () { 'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var RemHelp = /*#__PURE__*/function () {
    function RemHelp() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, RemHelp);

      this.eventType = config.eventType || 'resize';
      this.scale = config.scale || 10;
      this.setVieBind = null;
      this.maxWidth = config.maxWidth || 750;
      this.minWidth = config.maxWidth || 320;

      if (typeof config.auto === 'boolean') {
        this.auto = config.auto;
      } else {
        this.auto = true;
      }

      this.accuracy = config.accuracy || 3;
      this.config = config;
    }

    _createClass(RemHelp, [{
      key: "getFontSize",
      value: function getFontSize() {
        var clientWidth = document.documentElement.clientWidth || document.body.clientWidth;
        var width = clientWidth;

        if (clientWidth > this.maxWidth) {
          width = this.maxWidth;
        } else if (clientWidth < this.minWidth) {
          width = this.minWidth;
        }

        return (width / this.scale).toFixed(this.accuracy);
      }
    }, {
      key: "setView",
      value: function setView(e) {
        var fontSize = this.getFontSize();
        document.documentElement.style.fontSize = fontSize + 'px';
        this.config.onResize && this.config.onResize(e, fontSize);
      }
    }, {
      key: "addRem",
      value: function addRem() {
        this.setVieBind = this.setView.bind(this);
        this.setVieBind();

        if (this.config.auto) {
          window.addEventListener(this.eventType, this.setVieBind);
        }
      }
    }, {
      key: "removeRem",
      value: function removeRem() {
        document.documentElement.style.fontSize = '';

        if (this.config.auto) {
          window.removeEventListener(this.eventType, this.setVieBind);
        }
      }
    }]);

    return RemHelp;
  }();

  return RemHelp;

})));
